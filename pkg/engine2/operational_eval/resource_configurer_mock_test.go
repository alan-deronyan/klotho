// Code generated by MockGen. DO NOT EDIT.
// Source: ./resource_configuration.go
//
// Generated by this command:
//
//	mockgen -source=./resource_configuration.go --destination=../operational_eval/resource_configurer_mock_test.go --package=operational_eval
//

// Package operational_eval is a generated GoMock package.
package operational_eval

import (
	reflect "reflect"

	construct2 "github.com/klothoplatform/klotho/pkg/construct2"
	knowledgebase2 "github.com/klothoplatform/klotho/pkg/knowledge_base2"
	gomock "go.uber.org/mock/gomock"
)

// MockResourceConfigurer is a mock of ResourceConfigurer interface.
type MockResourceConfigurer struct {
	ctrl     *gomock.Controller
	recorder *MockResourceConfigurerMockRecorder
}

// MockResourceConfigurerMockRecorder is the mock recorder for MockResourceConfigurer.
type MockResourceConfigurerMockRecorder struct {
	mock *MockResourceConfigurer
}

// NewMockResourceConfigurer creates a new mock instance.
func NewMockResourceConfigurer(ctrl *gomock.Controller) *MockResourceConfigurer {
	mock := &MockResourceConfigurer{ctrl: ctrl}
	mock.recorder = &MockResourceConfigurerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResourceConfigurer) EXPECT() *MockResourceConfigurerMockRecorder {
	return m.recorder
}

// ConfigureResource mocks base method.
func (m *MockResourceConfigurer) ConfigureResource(resource *construct2.Resource, configuration knowledgebase2.Configuration, data knowledgebase2.DynamicValueData, action string, userInitiated bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfigureResource", resource, configuration, data, action, userInitiated)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConfigureResource indicates an expected call of ConfigureResource.
func (mr *MockResourceConfigurerMockRecorder) ConfigureResource(resource, configuration, data, action, userInitiated any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigureResource", reflect.TypeOf((*MockResourceConfigurer)(nil).ConfigureResource), resource, configuration, data, action, userInitiated)
}
