// Code generated by MockGen. DO NOT EDIT.
// Source: ./path_expansion.go
//
// Generated by this command:
//
//	mockgen -source=./path_expansion.go --destination=../operational_eval/path_expansion_mock_test.go --package=operational_eval
//

// Package operational_eval is a generated GoMock package.
package operational_eval

import (
	reflect "reflect"

	path_selection "github.com/klothoplatform/klotho/pkg/engine2/path_selection"
	gomock "go.uber.org/mock/gomock"
)

// MockEdgeExpander is a mock of EdgeExpander interface.
type MockEdgeExpander struct {
	ctrl     *gomock.Controller
	recorder *MockEdgeExpanderMockRecorder
}

// MockEdgeExpanderMockRecorder is the mock recorder for MockEdgeExpander.
type MockEdgeExpanderMockRecorder struct {
	mock *MockEdgeExpander
}

// NewMockEdgeExpander creates a new mock instance.
func NewMockEdgeExpander(ctrl *gomock.Controller) *MockEdgeExpander {
	mock := &MockEdgeExpander{ctrl: ctrl}
	mock.recorder = &MockEdgeExpanderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEdgeExpander) EXPECT() *MockEdgeExpanderMockRecorder {
	return m.recorder
}

// ExpandEdge mocks base method.
func (m *MockEdgeExpander) ExpandEdge(input path_selection.ExpansionInput) (path_selection.ExpansionResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExpandEdge", input)
	ret0, _ := ret[0].(path_selection.ExpansionResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExpandEdge indicates an expected call of ExpandEdge.
func (mr *MockEdgeExpanderMockRecorder) ExpandEdge(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExpandEdge", reflect.TypeOf((*MockEdgeExpander)(nil).ExpandEdge), input)
}
