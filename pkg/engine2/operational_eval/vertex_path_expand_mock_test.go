// Code generated by MockGen. DO NOT EDIT.
// Source: ./vertex_path_expand.go
//
// Generated by this command:
//
//	mockgen -source=./vertex_path_expand.go --destination=../operational_eval/vertex_path_expand_mock_test.go --package=operational_eval
//

// Package operational_eval is a generated GoMock package.
package operational_eval

import (
	reflect "reflect"

	path_selection "github.com/klothoplatform/klotho/pkg/engine2/path_selection"
	gomock "go.uber.org/mock/gomock"
)

// MockexpansionRunner is a mock of expansionRunner interface.
type MockexpansionRunner struct {
	ctrl     *gomock.Controller
	recorder *MockexpansionRunnerMockRecorder
}

// MockexpansionRunnerMockRecorder is the mock recorder for MockexpansionRunner.
type MockexpansionRunnerMockRecorder struct {
	mock *MockexpansionRunner
}

// NewMockexpansionRunner creates a new mock instance.
func NewMockexpansionRunner(ctrl *gomock.Controller) *MockexpansionRunner {
	mock := &MockexpansionRunner{ctrl: ctrl}
	mock.recorder = &MockexpansionRunnerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockexpansionRunner) EXPECT() *MockexpansionRunnerMockRecorder {
	return m.recorder
}

// addResourcesAndEdges mocks base method.
func (m *MockexpansionRunner) addResourcesAndEdges(result path_selection.ExpansionResult, expansion path_selection.ExpansionInput, v *pathExpandVertex) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "addResourcesAndEdges", result, expansion, v)
	ret0, _ := ret[0].(error)
	return ret0
}

// addResourcesAndEdges indicates an expected call of addResourcesAndEdges.
func (mr *MockexpansionRunnerMockRecorder) addResourcesAndEdges(result, expansion, v any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "addResourcesAndEdges", reflect.TypeOf((*MockexpansionRunner)(nil).addResourcesAndEdges), result, expansion, v)
}

// addSubExpansion mocks base method.
func (m *MockexpansionRunner) addSubExpansion(result path_selection.ExpansionResult, expansion path_selection.ExpansionInput, v *pathExpandVertex) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "addSubExpansion", result, expansion, v)
	ret0, _ := ret[0].(error)
	return ret0
}

// addSubExpansion indicates an expected call of addSubExpansion.
func (mr *MockexpansionRunnerMockRecorder) addSubExpansion(result, expansion, v any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "addSubExpansion", reflect.TypeOf((*MockexpansionRunner)(nil).addSubExpansion), result, expansion, v)
}

// consumeExpansionProperties mocks base method.
func (m *MockexpansionRunner) consumeExpansionProperties(expansion path_selection.ExpansionInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "consumeExpansionProperties", expansion)
	ret0, _ := ret[0].(error)
	return ret0
}

// consumeExpansionProperties indicates an expected call of consumeExpansionProperties.
func (mr *MockexpansionRunnerMockRecorder) consumeExpansionProperties(expansion any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "consumeExpansionProperties", reflect.TypeOf((*MockexpansionRunner)(nil).consumeExpansionProperties), expansion)
}

// getExpansionsToRun mocks base method.
func (m *MockexpansionRunner) getExpansionsToRun(v *pathExpandVertex) ([]path_selection.ExpansionInput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getExpansionsToRun", v)
	ret0, _ := ret[0].([]path_selection.ExpansionInput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// getExpansionsToRun indicates an expected call of getExpansionsToRun.
func (mr *MockexpansionRunnerMockRecorder) getExpansionsToRun(v any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getExpansionsToRun", reflect.TypeOf((*MockexpansionRunner)(nil).getExpansionsToRun), v)
}

// handleResultProperties mocks base method.
func (m *MockexpansionRunner) handleResultProperties(v *pathExpandVertex, result path_selection.ExpansionResult) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "handleResultProperties", v, result)
	ret0, _ := ret[0].(error)
	return ret0
}

// handleResultProperties indicates an expected call of handleResultProperties.
func (mr *MockexpansionRunnerMockRecorder) handleResultProperties(v, result any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "handleResultProperties", reflect.TypeOf((*MockexpansionRunner)(nil).handleResultProperties), v, result)
}
