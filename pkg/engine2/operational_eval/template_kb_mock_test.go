// Code generated by MockGen. DO NOT EDIT.
// Source: ./kb.go
//
// Generated by this command:
//
//	mockgen --source=./kb.go -destination=../engine2/operational_eval/template_kb_mock_test.go -package=operational_eval
//

// Package operational_eval is a generated GoMock package.
package operational_eval

import (
	reflect "reflect"

	graph "github.com/dominikbraun/graph"
	construct2 "github.com/klothoplatform/klotho/pkg/construct2"
	knowledgebase2 "github.com/klothoplatform/klotho/pkg/knowledge_base2"
	gomock "go.uber.org/mock/gomock"
)

// MockTemplateKB is a mock of TemplateKB interface.
type MockTemplateKB struct {
	ctrl     *gomock.Controller
	recorder *MockTemplateKBMockRecorder
}

// MockTemplateKBMockRecorder is the mock recorder for MockTemplateKB.
type MockTemplateKBMockRecorder struct {
	mock *MockTemplateKB
}

// NewMockTemplateKB creates a new mock instance.
func NewMockTemplateKB(ctrl *gomock.Controller) *MockTemplateKB {
	mock := &MockTemplateKB{ctrl: ctrl}
	mock.recorder = &MockTemplateKBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTemplateKB) EXPECT() *MockTemplateKBMockRecorder {
	return m.recorder
}

// AddEdgeTemplate mocks base method.
func (m *MockTemplateKB) AddEdgeTemplate(template *knowledgebase2.EdgeTemplate) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddEdgeTemplate", template)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddEdgeTemplate indicates an expected call of AddEdgeTemplate.
func (mr *MockTemplateKBMockRecorder) AddEdgeTemplate(template any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEdgeTemplate", reflect.TypeOf((*MockTemplateKB)(nil).AddEdgeTemplate), template)
}

// AddResourceTemplate mocks base method.
func (m *MockTemplateKB) AddResourceTemplate(template *knowledgebase2.ResourceTemplate) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddResourceTemplate", template)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddResourceTemplate indicates an expected call of AddResourceTemplate.
func (mr *MockTemplateKBMockRecorder) AddResourceTemplate(template any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddResourceTemplate", reflect.TypeOf((*MockTemplateKB)(nil).AddResourceTemplate), template)
}

// AllPaths mocks base method.
func (m *MockTemplateKB) AllPaths(from, to construct2.ResourceId) ([][]*knowledgebase2.ResourceTemplate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllPaths", from, to)
	ret0, _ := ret[0].([][]*knowledgebase2.ResourceTemplate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllPaths indicates an expected call of AllPaths.
func (mr *MockTemplateKBMockRecorder) AllPaths(from, to any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllPaths", reflect.TypeOf((*MockTemplateKB)(nil).AllPaths), from, to)
}

// Edges mocks base method.
func (m *MockTemplateKB) Edges() ([]graph.Edge[*knowledgebase2.ResourceTemplate], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Edges")
	ret0, _ := ret[0].([]graph.Edge[*knowledgebase2.ResourceTemplate])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Edges indicates an expected call of Edges.
func (mr *MockTemplateKBMockRecorder) Edges() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Edges", reflect.TypeOf((*MockTemplateKB)(nil).Edges))
}

// GetAllowedNamespacedResourceIds mocks base method.
func (m *MockTemplateKB) GetAllowedNamespacedResourceIds(ctx knowledgebase2.DynamicValueContext, resourceId construct2.ResourceId) ([]construct2.ResourceId, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllowedNamespacedResourceIds", ctx, resourceId)
	ret0, _ := ret[0].([]construct2.ResourceId)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllowedNamespacedResourceIds indicates an expected call of GetAllowedNamespacedResourceIds.
func (mr *MockTemplateKBMockRecorder) GetAllowedNamespacedResourceIds(ctx, resourceId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllowedNamespacedResourceIds", reflect.TypeOf((*MockTemplateKB)(nil).GetAllowedNamespacedResourceIds), ctx, resourceId)
}

// GetClassification mocks base method.
func (m *MockTemplateKB) GetClassification(id construct2.ResourceId) knowledgebase2.Classification {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClassification", id)
	ret0, _ := ret[0].(knowledgebase2.Classification)
	return ret0
}

// GetClassification indicates an expected call of GetClassification.
func (mr *MockTemplateKBMockRecorder) GetClassification(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClassification", reflect.TypeOf((*MockTemplateKB)(nil).GetClassification), id)
}

// GetEdgeTemplate mocks base method.
func (m *MockTemplateKB) GetEdgeTemplate(from, to construct2.ResourceId) *knowledgebase2.EdgeTemplate {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEdgeTemplate", from, to)
	ret0, _ := ret[0].(*knowledgebase2.EdgeTemplate)
	return ret0
}

// GetEdgeTemplate indicates an expected call of GetEdgeTemplate.
func (mr *MockTemplateKBMockRecorder) GetEdgeTemplate(from, to any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEdgeTemplate", reflect.TypeOf((*MockTemplateKB)(nil).GetEdgeTemplate), from, to)
}

// GetModel mocks base method.
func (m *MockTemplateKB) GetModel(model string) *knowledgebase2.Model {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModel", model)
	ret0, _ := ret[0].(*knowledgebase2.Model)
	return ret0
}

// GetModel indicates an expected call of GetModel.
func (mr *MockTemplateKBMockRecorder) GetModel(model any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModel", reflect.TypeOf((*MockTemplateKB)(nil).GetModel), model)
}

// GetPathSatisfactionsFromEdge mocks base method.
func (m *MockTemplateKB) GetPathSatisfactionsFromEdge(source, target construct2.ResourceId) ([]knowledgebase2.EdgePathSatisfaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPathSatisfactionsFromEdge", source, target)
	ret0, _ := ret[0].([]knowledgebase2.EdgePathSatisfaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPathSatisfactionsFromEdge indicates an expected call of GetPathSatisfactionsFromEdge.
func (mr *MockTemplateKBMockRecorder) GetPathSatisfactionsFromEdge(source, target any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPathSatisfactionsFromEdge", reflect.TypeOf((*MockTemplateKB)(nil).GetPathSatisfactionsFromEdge), source, target)
}

// GetResourcePropertyType mocks base method.
func (m *MockTemplateKB) GetResourcePropertyType(resource construct2.ResourceId, propertyName string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResourcePropertyType", resource, propertyName)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetResourcePropertyType indicates an expected call of GetResourcePropertyType.
func (mr *MockTemplateKBMockRecorder) GetResourcePropertyType(resource, propertyName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourcePropertyType", reflect.TypeOf((*MockTemplateKB)(nil).GetResourcePropertyType), resource, propertyName)
}

// GetResourceTemplate mocks base method.
func (m *MockTemplateKB) GetResourceTemplate(id construct2.ResourceId) (*knowledgebase2.ResourceTemplate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResourceTemplate", id)
	ret0, _ := ret[0].(*knowledgebase2.ResourceTemplate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResourceTemplate indicates an expected call of GetResourceTemplate.
func (mr *MockTemplateKBMockRecorder) GetResourceTemplate(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourceTemplate", reflect.TypeOf((*MockTemplateKB)(nil).GetResourceTemplate), id)
}

// GetResourcesNamespaceResource mocks base method.
func (m *MockTemplateKB) GetResourcesNamespaceResource(resource *construct2.Resource) (construct2.ResourceId, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResourcesNamespaceResource", resource)
	ret0, _ := ret[0].(construct2.ResourceId)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResourcesNamespaceResource indicates an expected call of GetResourcesNamespaceResource.
func (mr *MockTemplateKBMockRecorder) GetResourcesNamespaceResource(resource any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourcesNamespaceResource", reflect.TypeOf((*MockTemplateKB)(nil).GetResourcesNamespaceResource), resource)
}

// HasDirectPath mocks base method.
func (m *MockTemplateKB) HasDirectPath(from, to construct2.ResourceId) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasDirectPath", from, to)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasDirectPath indicates an expected call of HasDirectPath.
func (mr *MockTemplateKBMockRecorder) HasDirectPath(from, to any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasDirectPath", reflect.TypeOf((*MockTemplateKB)(nil).HasDirectPath), from, to)
}

// HasFunctionalPath mocks base method.
func (m *MockTemplateKB) HasFunctionalPath(from, to construct2.ResourceId) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasFunctionalPath", from, to)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasFunctionalPath indicates an expected call of HasFunctionalPath.
func (mr *MockTemplateKBMockRecorder) HasFunctionalPath(from, to any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasFunctionalPath", reflect.TypeOf((*MockTemplateKB)(nil).HasFunctionalPath), from, to)
}

// ListResources mocks base method.
func (m *MockTemplateKB) ListResources() []*knowledgebase2.ResourceTemplate {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListResources")
	ret0, _ := ret[0].([]*knowledgebase2.ResourceTemplate)
	return ret0
}

// ListResources indicates an expected call of ListResources.
func (mr *MockTemplateKBMockRecorder) ListResources() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListResources", reflect.TypeOf((*MockTemplateKB)(nil).ListResources))
}
